import aiohttp
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "7572613508:AAErKCDjTYY2E_tLz0U04aA9A8V1PCsH-0w"
DECK_API_URL = "https://deckofcardsapi.com/api/deck"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
games = {}


async def create_deck() -> str:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –∫–∞—Ä—Ç"""
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{DECK_API_URL}/new/shuffle/?deck_count=1") as resp:
            data = await resp.json()
            return data["deck_id"]


async def draw_cards(deck_id: str, count: int) -> list:
    """–¢—è–Ω–µ—Ç –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã"""
    async with aiohttp.ClientSession() as session:
        async with session.get(f"{DECK_API_URL}/{deck_id}/draw/?count={count}") as resp:
            data = await resp.json()
            return data["cards"]


def calculate_score(cards: list) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—á–∫–∏ –≤ —Ä—É–∫–µ"""
    values = {
        "2": 2, "3": 3, "4": 4, "5": 5, "6": 6, "7": 7, "8": 8,
        "9": 9, "10": 10, "JACK": 10, "QUEEN": 10, "KING": 10, "ACE": 11
    }
    score = sum(values[card["value"]] for card in cards)
    aces = sum(1 for card in cards if card["value"] == "ACE")

    while score > 21 and aces:
        score -= 10
        aces -= 1

    return score


def format_cards(cards: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    emoji = {
        "HEARTS": "‚ô•Ô∏è", "DIAMONDS": "‚ô¶Ô∏è",
        "CLUBS": "‚ô£Ô∏è", "SPADES": "‚ô†Ô∏è"
    }
    return " ".join(
        f"{emoji[card['suit']]}{card['value']}"
        for card in cards
    )


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üÉè –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Blackjack!\n\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "‚Ä¢ –¶–µ–ª—å - –Ω–∞–±—Ä–∞—Ç—å 21 –æ—á–∫–æ –∏–ª–∏ –±–ª–∏–∂–µ –∫ –Ω–µ–º—É, —á–µ–º –¥–∏–ª–µ—Ä\n"
        "‚Ä¢ –¢—É–∑ = 1 –∏–ª–∏ 11 –æ—á–∫–æ–≤\n"
        "‚Ä¢ –ö–∞—Ä—Ç–∏–Ω–∫–∏ = 10 –æ—á–∫–æ–≤\n\n"
        "–ù–∞–∂–º–∏ /play —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!"
    )


@dp.message(Command("play"))
async def play(message: types.Message):
    deck_id = await create_deck()
    player_cards = await draw_cards(deck_id, 2)
    dealer_cards = await draw_cards(deck_id, 2)

    games[message.from_user.id] = {
        "deck_id": deck_id,
        "player": player_cards,
        "dealer": dealer_cards,
        "status": "player_turn"
    }

    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="hit")
    builder.button(text="‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data="stand")

    await message.answer(
        f"üíº –î–∏–ª–µ—Ä: {dealer_cards[0]['value']} –∏ ‚ùì\n"
        f"üë§ –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {format_cards(player_cards)} "
        f"(–û—á–∫–æ–≤: {calculate_score(player_cards)})\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(F.data == "hit")
async def hit(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in games:
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é /play")
        return

    game = games[user_id]
    new_card = (await draw_cards(game["deck_id"], 1))[0]
    game["player"].append(new_card)
    score = calculate_score(game["player"])

    if score > 21:
        game["status"] = "game_over"
        await callback.message.edit_text(
            f"üí• –ü–µ—Ä–µ–±–æ—Ä! {format_cards(game['player'])} = {score}\n"
            f"üíº –î–∏–ª–µ—Ä: {format_cards(game['dealer'])} = {calculate_score(game['dealer'])}\n\n"
            "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –ù–∞–∂–º–∏ /play —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞",
            reply_markup=None
        )
    else:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –í–∑—è—Ç—å –∫–∞—Ä—Ç—É", callback_data="hit")
        builder.button(text="‚úã –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data="stand")

        await callback.message.edit_text(
            f"üíº –î–∏–ª–µ—Ä: {game['dealer'][0]['value']} –∏ ‚ùì\n"
            f"üë§ –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {format_cards(game['player'])} "
            f"(–û—á–∫–æ–≤: {score})\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup()
        )

    await callback.answer()


@dp.callback_query(F.data == "stand")
async def stand(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in games:
        await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é /play")
        return

    game = games[user_id]
    game["status"] = "game_over"
    player_score = calculate_score(game["player"])
    dealer_score = calculate_score(game["dealer"])

    # –î–∏–ª–µ—Ä –¥–æ–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—ã –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º
    while dealer_score < 17:
        new_card = (await draw_cards(game["deck_id"], 1))[0]
        game["dealer"].append(new_card)
        dealer_score = calculate_score(game["dealer"])

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if dealer_score > 21 or player_score > dealer_score:
        result = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! üéâ"
    elif player_score == dealer_score:
        result = "–ù–∏—á—å—è! ü§ù"
    else:
        result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! üò¢"

    await callback.message.edit_text(
        f"üë§ –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {format_cards(game['player'])} = {player_score}\n"
        f"üíº –î–∏–ª–µ—Ä: {format_cards(game['dealer'])} = {dealer_score}\n\n"
        f"{result}\n\n"
        "–ù–∞–∂–º–∏ /play —á—Ç–æ–±—ã —Å—ã–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞",
        reply_markup=None
    )

    del games[user_id]
    await callback.answer()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())