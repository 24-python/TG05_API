import asyncio
import aiohttp
import random
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from config import TOKEN, API_NASA

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)  # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ config.py
dp = Dispatcher()  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π


async def get_random_apod():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ APOD (Astronomy Picture of the Day) –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥."""
    end_time = datetime.now()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    start_time = end_time - timedelta(days=365)  # –î–∞—Ç–∞ –≥–æ–¥ –Ω–∞–∑–∞–¥
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã –º–µ–∂–¥—É start_time –∏ end_time
    random_date = start_time + (end_time - start_time) * random.random()
    date_str = random_date.strftime("%Y-%m-%d")  # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è API

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ NASA API
    url = f"https://api.nasa.gov/planetary/apod?api_key={API_NASA}&date={date_str}"

    try:
        async with aiohttp.ClientSession() as session:  # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏
            async with session.get(url) as response:  # GET-–∑–∞–ø—Ä–æ—Å –∫ API
                response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
                apod = await response.json()  # –ü–∞—Ä—Å–∏–Ω–≥ JSON-–æ—Ç–≤–µ—Ç–∞

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                return {
                    "title": apod.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"),  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
                    "description": apod.get("explanation", "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."),  # –û–ø–∏—Å–∞–Ω–∏–µ
                    "url": apod.get("url"),  # URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–≤–∏–¥–µ–æ
                    "is_video": apod.get("media_type") == "video"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –º–µ–¥–∏–∞
                }
    except aiohttp.ClientError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ NASA API: {e}")
        return None  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None


async def translate_text(text, target_lang="ru"):
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–∏–π —á–µ—Ä–µ–∑ Google Translate (–±–µ–∑ API-–∫–ª—é—á–∞)."""
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –Ω–µ–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API Google Translate
    url = f"https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl={target_lang}&dt=t&q={text}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                response.raise_for_status()
                translated_data = await response.json()
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                translated_text = "".join([part[0] for part in translated_data[0]])
                return translated_text
    except aiohttp.ClientError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        return text  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start_command(message: Message):
    await message.answer("üöÄ –ü—Ä–∏–≤–µ—Ç! \n–û—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /random_apod, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ NASA!")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random_apod
@dp.message(Command("random_apod"))
async def random_apod(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç NASA
    apod = await get_random_apod()

    if not apod:  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç NASA. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    title = await translate_text(apod["title"])
    description = await translate_text(apod["description"])

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –¥–ª—è –ø–æ–¥–ø–∏—Å–µ–π)
    max_length = 1024 - len(title) - 10  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
    if len(description) > max_length:
        description = description[:max_length] + "..."  # –û–±—Ä–µ–∑–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if apod["is_video"]:
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å URL
        await message.answer(f"üé• {title}\n\n{description}\n\nüì∫ –í–∏–¥–µ–æ: {apod['url']}")
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        await message.answer_photo(apod["url"], caption=f"üì∑ {title}\n\n{description}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling


if __name__ == '__main__':
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π main —Ñ—É–Ω–∫—Ü–∏–∏